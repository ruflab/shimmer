name: Release Docs

on:
  release:
    types:
      - published

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11.4'
      - name: Load cached Poetry install
        uses: actions/cache@v3
        id: cached-poetry
        with: 
          path: ~/.local
          key: poetry-0
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
      - name: Poetry config
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry config installer.parallel true
      - name: Update torch's source to use CPU
        run: |
          poetry source add torch-cpu --priority=explicit --no-interaction https://download.pytorch.org/whl/cpu
          torch_version=$(poetry show torch --no-ansi | sed -n 2p | sed 's/^\(\s*\)version\(\s*\):\(\s*\)\([0-9\.\+a-zA-Z]*\)\(.*\)$/\4/')
          poetry add --lock --no-interaction --source torch-cpu "torch@$torch_version"
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with test,dev,docs
      - name: Create new branch
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout -b "release_docs/${{ github.event.release.tag_name }}"
      - run: poetry run python ./docs/make.py ${{ github.event.release.tag_name }}
      - name: Make PR for new version doc build
        run: |
          git add docs/api
          git commit -m "Build release docs"
          git push origin "release_docs/${{ github.event.release.tag_name }}"
          gh pr create --base main --title "DOCS: shimmer API docs for $RELEASE_VERSION." --body "Automatically generated docs for this release."
        env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            RELEASE_VERSION: ${{ github.event.release.tag_name }}
